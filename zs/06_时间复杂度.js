/*
  + - * / 都是属于固定时间的常数操作
  1 + 1 与 100万 + 100万 经历的计算过程都是固定的，底层都是32位信息计算相加的结果
    
  数组寻找也是属于固定时间的常数操作
  [1] 与 [100000] 经历的过程都是固定时间

  当调用一条语句时，所执行的过程是与固定时间有关呢还是与数据量有关的
  如果是与数据量有关的它就不是一个常数操作，反之如果与数据量无关的它就是一个固定时间的常数操作

  时间复杂度不关心系数和低阶项，只关心最高阶是什么
  当数据量很大时，时间复杂度就是来描述算法与数据量之间的关系，算法运行的增速时间
  常数操作 O(1)
  二分法 O(logn)
  线性时间 O(n)
  快排归并 O(nlogn) -> O(n) * O(logn)
  简单排序 O(n2) -> 冒泡（等差数列）、插入、选择
  旅行商 O(n!) 
*/

/*
  java中的动态数组 ArrayList
  动态数组 [a] -> [a, b] 就需要将老的数组删除，重新申请空间（扩容）每次申请的扩容空间是等比数列
  [a] -> [a, b] -> [a, b, c, d]
  而动态数组扩容的行为均摊下来与使用固定数组的时间复杂度相差很小，属于 O(1) 常数操作
*/

/* 
  java中的 HashMap 结构增删改查的操作时间复杂度是 O(1)
  js 中的 Map 结构浏览器 V8 没理由实现的更差吧
*/
var map = new Map();
map.set('ming', '我是明同学');
map.set('ming', '我是明同学'); // 相同的 key 覆盖
console.log(map.get('ming')); // '我是明同学'
map.delete('ming');
map.set(setTimeout, '这是定时器');
console.log(map.get(setTimeout)); // '这是定时器'