/*
  加法，位数相加满 2 进 1
  1100 + 100 = 12 + 4 = 16
    1100
     100
  -------
   10000 = 16
  
  1111 + 1010 = 15 + 10 = 25
    1111
    1010
  -------
   11001 = 1*2^4 + 1*2^3 + 1*2^0 = 16 + 8 + 1 = 25
*/
function add(a, b){
  var sum = a;
  while(b != 0){
    sum = a ^ b; // 无进位相加信息 = sum
    b = (a & b) << 1; // 进位信息 = b'
    a = sum; // a' 无进位相加的信息
  }
  return sum;
}
console.log(add(46, 20));

/*
  减法，位数相减，借位时保留被借位的减数，同时抵消被减数的位数
  101101 - 11010 = 45 - 26 = 19
    101101
     11010
  ---------
    010011 = 1*2^4 + 1*2^1 + 1*2^0 = 16 + 2 + 1 = 19

    110010110 = 406 - 105 = 301
      1101001
  ------------
    100101101 = 1*2^8 + 1*2^5 + 1*2^3 + 1*2^2 + 1*2^0 = 256 + 32 + 8 + 4 + 1 = 301
*/
function negNum(n){
  return add(~n, 1); // a - b = a + b的相反数 = a + (~b + 1)
}
function minus(a, b){
  return add(a, negNum(b));
}
console.log(minus(46, 20));

/*
  乘法，被乘数与乘数的每一位相乘得出的值保留在当前位数，最后补 0 相加
  1100 * 100 = 12 * 4 = 48
    1100
     100
  -------
  110000 = 1*2^5 + 1*2^4 = 32 + 16 = 48

  1111 * 1010 = 15 * 10 = 150
      1111
      1010
  ---------
         0
     1111
       0
   1111
  ---------
     11110
   1111000
  ---------
  10010110 = 150
*/
function multi(a, b){
  var ans = 0;
  // b = 0 结束
  while(b != 0){
    // b -> 1010 & 0001 = 0
    // b -> 0101 & 0001 = 1
    // b -> 0010 & 0001 = 0
    // b -> 0001 & 0001 = 1
    if((b & 1) != 0){
      // 0 + 01100
      // 0 + 01100 + 0110000
      ans = add(ans, a);
    }
    // a -> 01100
    // b -> 0101
    // a -> 011000
    // b -> 0010
    // a -> 0110000
    // b -> 0001
    // a -> 01100000
    // b -> 0000
    a <<= 1;
    b >>>= 1;
  }
  // ans = 0 + 01100 + 0110000 = 0111100 = 60
  return ans;
}
console.log(multi(6, 10));

/*
  除法，两个数相除后余数相减
  1111 / 1010 = 1 % 101 = 1 % 5
*/
function isNeg(num){
  return num < 0;
}
function div(a, b){
  var x = isNeg(a) ? negNum(a) : a,
      y = isNeg(b) ? negNum(b) : b,
      ans = 0;
  // 除去符号位 i 从 30位开始
  for(var i = 30; i >= 0; i = minus(i, 1)){
    // x 向右移 i 位直到 >= y
    // 001100 / 000010 = 12 / 2 = 6
    // i = 2 -> 000011 >= 000010
    // ans = 000100
    // x = 001100 - 001000 = 000100
    // i = 1 -> 000010 >= 000010
    // ans = 000110
    // x = 000100 - 000100 = 0
    if(x >> i >= y){
      ans |= 1 << i;
      x = minus(x, y << i);
    }
  }
  // 如果 a 与 b 中有一个负数结果就是负数反之就是正数
  return isNeg(a) ^ isNeg(b) ? negNum(ans) : ans;
}
