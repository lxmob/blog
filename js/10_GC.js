/*
  GC 垃圾回收机制
  JS 引擎不需要我们手动分配内存，它是通过自动内存管理实现内存分配和闲置资源回收
  全局变量是在浏览器页面关闭时释放内存，而局部变量只会在函数执行过程中存在
  所以垃圾回收一般是指对函数内部局部变量的回收机制

  回收的过程
  首先是找到不再使用的变量，释放其占用内存，每隔一段时间都会检查
  垃圾回收器首先会排除全局变量和闭包中的变量，然后再处理那些没有被排除的变量进行删除
*/

/*
  标记清除(mark and sweep)
  通过追踪对象之间的引用关系，标记出不再被引用的对象，然后清除这些对象及其占用的内存空间
  它会从一组根对象（全局对象、执行上下文中的变量等）出发，逐步遍历所有可访问的对象
  标记活动对象，并将未被标记的对象视为垃圾进行回收
*/
function foo () {
  var num = 10; // 标记变量进入环境
}
foo(); // 标记离开环境

/*
  引用计数(reference counting)
  通过对对象的引用计数进行跟踪来确定何时回收对象。当对象被引用时，引用计数加一
  当对象不再被引用时，引用计数减一
  当引用计数为零时，表示对象不再被使用，可以安全地进行回收

  IE6 以下使用的是引用计数方式
  但是引用计数算法可能存在循环引用的问题，导致一些对象无法被正确回收
  所以目前在现代 JS 引擎中很少使用这种算法
*/
var obj = { name: 'kiin' },
    son = { father: obj };
obj.son = son;
